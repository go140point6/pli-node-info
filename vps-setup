Basic documentation on how your VPS should be configured, taking basic security and best practices.

Note: All VPS's will use different base images for their distros, some install more basic tools than others.  
This has been tested with Vultr and Racknerd Ubuntu 20.04 distros.

When you first log in to your VPS, you are likely 'root'.  It is never considered best practice to run anything as root, you should
create a regular user and run everything from that users.

Change root password (optional):
  passwd
  
Add regular user:
  adduser -u jojo

Add that user to the sudoers file:
  adduser jojo sudo
  
Exit your terminal and ssh back in as your user 'jojo'.  From this point, you will do everything as 'jojo', never log in as root or 'su' (switch user) as root.

Update your distro
  sudo apt-get update
  sudo apt-get install nano vim # Nano is a text editor that is most like something you are probably used to, I prefer vim.  One or both may already be installed.
  sudo apt-get install curl git # Both needed for many things, not just PLI node, may already be installed
  sudo apt-get upgrade
  sudo apt-get dist-upgrade
  sudo apt-get autoremove
  
REBOOT to make sure any new kernel is active (maybe not needed, idk... I can't shake my Windows roots)

SSH back in as your 'jojo' user.

Optional, but highly recommended: Key-based Authentication.  
Create a public/private key pair to use that to log in to your VPS.  You will turn off the ability to use passwords over SSH.
If you ever need to, you can log in via your VPS's console with the root password.

On the VPS, create the correct file and permissions:
  mkdir ~/.ssh && chmod 700 ~/.ssh
    
Note: the tilde (~) means "my profile", so it's a shortcut for /home/jojo in this case.

Install needed package (may already be installed):
  sudo apt-get install openssh-client

Create key pair:
  ssh-keygen
  [Enter] # Accept default path and filename of /home/jojo/.ssh/id_rsa
  [Enter] # If used, a passphrase (password) needed everytime you attempt to read the private key.  Choice is yours.
  [Enter] # Either repeat the passphrase or leave it blank again.
  
Rename and apply permissions to id_rsa.pub:
  mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
  chmod 600 ~/.ssh/authorized_keys

Note:  Now what? Well you need to copy the private key to your local workstation and refer to it when you start an ssh session.
This is dependent to what you use for ssh.  I use PuTTY on Windows and part of that is Pagent that sits running and I have added
my keys to.  Since I use passwords on my keys, Pagent asks me once for the password to unlock it and then won't ask again until
I restart my PC or stop Pagent for some reason.  PuTTY recognizes it and automatically does the rest.  If you use Terminal (on Mac)
you will likely have to point to the file and provide the password (if present) on the command line.  If you use some other software
you will need to research it yourself.  Google is your friend.

No matter what, test your key pair by opening another session using it before you turn off the ability to use a password with ssh.
The point of having a key pair is you shouldn't be asked for a password when logging in, and if you don't specify your private key
and password is turned off, you simply get denied access.

This is what I see when I am successful: Authenticating with public key "id_rsa" from agent

Configure SSH more Securely - Step 1 (optional but recommended - do this is steps, don't do 1 and 2 at the same time until you are
confident you know what you are doing)

Note: Do NOT close your terminal session after making these changes.  Leave your session running and start a new one.  This will
ensure your key pair is working.

Edit the file /etc/ssh/sshd_config:
  sudo nano /etc/ssh/sshd_config
  
  Change:
    #PasswordAuthentication yes # this may or may not be commented out... the # sign is a comment, it means ignore
  To:
    PasswordAuthentication no
    
  Ensure the following are set (should be default):
    ChallengeResponseAuthentication no
    UsePAM yes

Save the file and enter the following:
  sudo systemctl restart sshd
  
STOP!  Did you read the warning above to leave open this terminal window?  Start a new one to test.  The goal is to log in to your VPS without a password,
using only the key pair for authentication.

Configure SSH more Securely - Step 2 (optional but recommended)

Note: Do NOT close your terminal session after making these changes.  Leave your session running and start a new one.  This will
ensure your new port is working.

This is probably the single most important change you can make because I *garuntee* you are getting hammered right now by script kiddies attempting to log in
to your server via SSH over port 22 using brute force attacks.  This is because port 22 is the "standard" port for SSH.  You should change it.  
Technically you should pick something between 49,152 and 65,535 according to the standard, but you need to open your firewall (and after you get things 
working, close 22).

In this example, I've chosen port 55123.

If using ufw:
  sudo ufw allow 55123
  
If using another firewall, you will need to figure out how to add.  This could be your VPS firewall (i.e. Ionos VPS has it on by default).

Edit the file /etc/ssh/sshd_config:
  sudo nano /etc/ssh/sshd_config
  
  Change:
    #Port 22
  To:
    Port 55123
    
Save the file and enter the following:
    sudo systemctl restart sshd
  
STOP!  Did you read the warning above to leave open this terminal window?  Start a new one to test, making sure to specify port 55123 as the port to use.
The goal is this new session should FAIL if you try to use port 22 and should SUCCEED if you use port 55123.

Once you have ensured your can start a new SSH session over port 55123, you can exit (close) the old terminal on port 22.

Fail2ban (optional, unlikely needed unless you are stickign with port 22 for ssh)

If you want to stick with port 22, I recommend fail2ban which will ban IP addresses who repeatedly attempt ssh access.  More info here:
https://pimylifeup.com/raspberry-pi-fail2ban/

  sudo apt-get install fail2ban
  sudo cp -p /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
  sudo nano /etc/fail2ban/jail.local
  
  Find the section [sshd] which is line 279 for me.  Under "backend = %(sshd_backend)s", add:
    enabled   = true
    filter    = sshd
    banaction = iptables-multiport
    findtime  = 86400 # 86400 seconds = 1 day
    bantime   = -1
    maxretry  = 5
    
Note:  maxretry means you get 5 attempts to log in before getting your own IP address locked out.  Be sure you only use fail2ban after you have an ssh
keypair setup and working, or if you are sticking to password authentication, make sure you type your password in correctly.  If you lock youself out,
you will need to use your VPS control panel to get back in (this is different for every VPS).

To see who is banned:
  sudo fail2ban-client status sshd
  
To unban a particular IP Address:
  sudo fail2ban-client set sshd unban {ip address} # No curly brackets, just the IP address i.e. 123.123.123.123
    
    
  







    
