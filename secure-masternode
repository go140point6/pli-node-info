Configure your XDC Masternode to use secure websockets (WSS) and secure RPC.

Special thanks to @s4njk4n for his write-up that made this much easier to tackle:
https://www.xdc.dev/s4njk4n/ssltls-encryption-for-xdc-node-rpcs-k15

1. Use Let's Encrypt to get certs.  See the write-up in this repo (let-encrypt-ssl), only change a couple things (be sure to do the others):
    - As you shouldn't be running a plugin node on the MN, don't open 6689, but go ahead and open 443.  Be sure to keep 80 open (LE needs for renewals)
    - When telling LE what servers, pick your main server name and you two aliases (one for WSS, one for RPC):
        a. xdc-mainnet01.mydomain.com - this should be an A record in your DNS
        b. erpc-mainnet.mydomain.com - this is an alias in your DNS (pointing to A record)
        c. wss-mainnet.mydomain.com - this is an alias in your DNS (pointing to A record)
      Note: When prompted by LE, add them separated by a comma or space (one line)

2. Install nginx:
      sudo apt-get update
      sudo apt-get install nginx

3. Configure docker to always use the same IP for your MN. From what I read, setting a "static" IP address like this isn't considered best practice, but I couldn't find a better solution (likely due to my incredibly poor docker admin skills):
    - Edit ~/XinFin-Node/[mainnet or testnet]/docker-compose.yml:

    Remove the line -> 
        network_mode: "host"

    Add all the lines below (be careful with proper spacing) ->

        networks:
          mynetwork:
            ipv4_address: 172.19.0.2
        ports:
          - "30303:30303" 

        networks:
          mynetwork:
            ipam:
              driver: default
              config:
                - subnet: 172.19.0.0/24

    Note: Above is for mainnet, use - "30304:30304" for apothem.  Also note the IP address and subnet selected are somewhat arbitrary, I noticed docker selecting subnets btween 18 and 26 so I picked 19.  Perhaps it would be better to use a private range that docker would never use but I don't plan to run any other containers on this VPS at all, so I'm not sure it really matters.

4. Restart the container and check docker information to ensure it's correct:

      sudo ~/XinFin-Node/[mainnet or testnet]/bash docker-down.sh
      sudo ~/XinFin-Node/[mainnet or testnet]/bash docker-up.sh

      sudo docker inspect mainnet_xinfinnetwork_1
      or (for apothem)
      sudo docker inspect testnet_xinfinnetwork_1

      Note: IPAddress (what docker is using) should be what you set above (172.19.0.2).  The ports are whatever docker is using internally and based on what you set inside the start-node.sh (or start-apothem.sh) script.  I'm using 8545 (rpc) and 8555 (wss).  Note that the "official" ports of 8989 and 8888 (mainnet) or 8999 and 8898 (apothem) are not used in this scenario.  You want users to connect to your RPC and WSS via port 443 ONLY (that's why you are setting up the reverse proxy).

5. Configure nginx (example assumes IPAddress and ports noted above):
    - Edit /etc/nginx/nginx.conf and add the following (showing mainnet) in the http block:

        ##
        # XDC Node RPC Reverse Proxy (mainnet)
        ##

        server {
            listen 443 ssl;
            server_name erpc-mainnet.mydomain.com;

            # Optional to limit what servers can use your RPC
            allow 123.4.56.78; # pli-oracle01
            allow 234.5.67.89; # pli-oracle02
            deny all;

            ssl_certificate /etc/letsencrypt/live/xdc-masternode01.mydomain.com/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/xdc-masternode01.mydomain.com/privkey.pem;

            location / {
                proxy_pass http://172.19.0.2:8545;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
        }

        ##
        # XDC Node WSS Reverse Proxy (mainnet)
        ##

        server {
            listen 443 ssl;
            server_name wss-mainnet.mydomain.com;

            # Optional to limit what servers can use your WS
            allow 123.4.56.78; # pli-oracle01
            allow 234.5.67.89; # pli-oracle02
            deny all;

            ssl_certificate /etc/letsencrypt/live/xdc-masternode01.mydomain.com/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/xdc-masternode01.mydomain.com/privkey.pem;

            location / {
                proxy_pass http://172.19.0.2:8555;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;

                # These three are critical to getting websockets to work
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
            }
        }

6. Fix permissions.  If you followed lets-encrypt-ssl, the only thing to fix is adding your regular user to the www-data group:
      sudo usermod -a -G <regular_user> www-data

7. Restart ngnix and check status (note that the docker container must be UP for nginx to successfully restart):
      sudo systemctl restart nginx
      sudo systemctl status nginx

8. Block unencrypted traffic to your masternode by removing ports 8989 and 8888 (mainnet) or ports 8999 and 8898 (apothem).  Remember both 443 and 80 should be allowed, and either 30303 (mainnet) or 30304 (apothem) should be open.  This is the peer-to-peer port and you want to allow this.  Your docker-compose.yml file above is mapping it directly.

9. Test with your application:
      RPC = https://erpc-mainnet.mydomain.com
      WSS = wss://wss-mainnet.mydomain.com
